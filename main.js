/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => animeToObsidian
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// settings.ts
var import_obsidian2 = require("obsidian");

// filefinder.ts
var import_obsidian = require("obsidian");
function ls(asked, folder = app.vault.getRoot()) {
  console.log("listing directory");
  let listOfFiles = [];
  folder.children.forEach((file) => {
    if (file instanceof import_obsidian.TFolder) {
      if (asked == "folder" || asked == "all" || asked == void 0) {
        listOfFiles.push(file.path);
      }
      listOfFiles = listOfFiles.concat(ls(asked, file));
    } else if (file instanceof import_obsidian.TFile) {
      if (asked == "file" || asked == "all" || asked == void 0) {
        listOfFiles.push(file.path);
      }
    }
  });
  return listOfFiles;
}

// settings.ts
var DEFAULT_SETTINGS = {
  basePath: ""
};
var animeToObsidianSettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    const options = ls("folder");
    new import_obsidian2.Setting(containerEl).setName("Base Path").setDesc("The base path for your anime list").addDropdown((dropdown) => {
      dropdown.addOption("", "Select a base path");
      options.forEach((option) => {
        dropdown.addOption(option, option);
      });
      dropdown.setValue(this.plugin.settings.basePath);
      dropdown.onChange(async (value) => {
        this.plugin.settings.basePath = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// main.ts
var aditionaltags = {
  tags: ["anime", "culture"]
};
var TextPromptModal = class extends import_obsidian3.Modal {
  constructor(app2) {
    super(app2);
    this.text = "";
  }
  onOpen() {
    let { contentEl } = this;
    let title = contentEl.createEl("h2");
    title.textContent = "add a page for an anime";
    let textInput = contentEl.createEl("input", { type: "text" });
    textInput.addEventListener("input", () => {
      this.text = textInput.value;
    });
    let submitButton = contentEl.createEl("button");
    submitButton.textContent = "Submit";
    submitButton.addEventListener("click", () => {
      this.close();
      if (this.resolver) {
        this.resolver(this.text);
      }
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  // Ajouter une mÃ©thode pour obtenir la valeur de la zone de texte
  getValue() {
    return new Promise((resolve) => {
      this.resolver = resolve;
    });
  }
};
var animeText = class {
  constructor() {
  }
  createText(animeData, animeName, aditionaltags2) {
    let text = "";
    text += "---\n" + this.createTags(animeData, animeName, aditionaltags2) + "---\n";
    text += `# description: 
 ${animeData.synopsis}
`;
    return text;
  }
  createTags(data, animeName, aditionaltags2) {
    let tags = "tags:\n";
    tags += `  - ${spaceremover(animeName)}
`;
    aditionaltags2.tags.forEach((element) => {
      element = spaceremover(element);
      console.log(element);
      tags += `  - ${element}
`;
    });
    data.genres.forEach((element) => {
      tags += `  - ${element.name}
`;
    });
    data.themes.forEach((element) => {
      tags += `  - ${element.name}
`;
    });
    data.demographics.forEach((element) => {
      tags += `  - ${element.name}
`;
    });
    return tags;
  }
};
var animeToObsidian = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "submit-anime",
      name: "add a page for an anime",
      callback: async () => {
        let modal = new TextPromptModal(this.app);
        modal.open();
        let value = await modal.getValue();
        console.log(value);
        if (value != "") {
          let filePath = this.settings.basePath + "/" + value + ".md";
          let file = await this.app.vault.create(filePath, "");
          let leaf = this.app.workspace.activeLeaf;
          await leaf.openFile(file);
          let editor = leaf.view.sourceMode.cmEditor;
          let text = new animeText();
          console.log(text.createText(await getAnimeData(value), value, aditionaltags));
          editor.setValue(text.createText(await getAnimeData(value), value, aditionaltags));
        } else {
          new import_obsidian3.Notice("did you type nothing ? (error : variable is empty)");
        }
      }
    });
    this.addSettingTab(new animeToObsidianSettingsTab(this.app, this));
  }
  async onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
function spaceremover(text) {
  let newtext = "";
  for (let i = 0; i < text.length; i++) {
    if (text[i] == " ") {
      newtext += "_";
    } else {
      newtext += text[i];
    }
  }
  return newtext;
}
async function getAnimeData(animeName) {
  const request = {
    url: `https://api.jikan.moe/v4/anime?q=${animeName}&limit=1`,
    method: "GET"
  };
  try {
    const response = await (0, import_obsidian3.requestUrl)(request);
    if (response.status !== 200) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    console.log(response.json.data);
    return response.json.data[0];
  } catch (error) {
    console.error(`Failed to fetch anime data: ${error.message}`);
  }
}
//# sourceMappingURL=data:application/json;base64,
